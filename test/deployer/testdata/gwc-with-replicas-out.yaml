---
# Source: kgateway-proxy/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gw
  labels:
    kgateway: kube-gateway
    app.kubernetes.io/name: gw
    app.kubernetes.io/instance: gw
    gateway.networking.k8s.io/gateway-name: gw
    app.kubernetes.io/version: "1.0.0-ci1"
    gateway.networking.k8s.io/gateway-class-name: kgateway
    app.kubernetes.io/managed-by: kgateway
automountServiceAccountToken: false
---
# Source: kgateway-proxy/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gw
  labels:
    kgateway: kube-gateway
    app.kubernetes.io/name: gw
    app.kubernetes.io/instance: gw
    gateway.networking.k8s.io/gateway-name: gw
    app.kubernetes.io/version: "1.0.0-ci1"
    gateway.networking.k8s.io/gateway-class-name: kgateway
    app.kubernetes.io/managed-by: kgateway
data:
  envoy.yaml: |
    admin:
      address:
        socket_address: { address: 127.0.0.1, port_value: 19000 }
    layered_runtime:
      layers:
      - name: static_layer
        static_layer:
          envoy.restart_features.use_eds_cache_for_ads: true
      - name: admin_layer
        admin_layer: {}
    node:
      cluster: gw.default
      metadata:
        role: kgateway-kube-gateway-api~default~gw
    static_resources:
      listeners:
      - name: readiness_listener
        address:
          socket_address: { address: 0.0.0.0, port_value: 8082 }
        filter_chains:
          - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_http
                codec_type: AUTO
                route_config:
                  name: main_route
                  virtual_hosts:
                    - name: local_service
                      domains: ["*"]
                      routes:
                        - match:
                            path: "/ready"
                            headers:
                              - name: ":method"
                                string_match:
                                  exact: GET
                          route:
                            cluster: admin_port_cluster
                http_filters:
                  - name: envoy.filters.http.health_check
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck
                      pass_through_mode: false
                      headers:
                      - name: ":path"
                        string_match:
                          exact: "/envoy-hc"
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      - name: prometheus_listener
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 9091
        filter_chains:
          - filters:
              - name: envoy.filters.network.http_connection_manager
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  codec_type: AUTO
                  stat_prefix: prometheus
                  route_config:
                    name: prometheus_route
                    virtual_hosts:
                      - name: prometheus_host
                        domains:
                          - "*"
                        routes:
                          - match:
                              path: "/ready"
                              headers:
                                - name: ":method"
                                  string_match:
                                    exact: GET
                            route:
                              cluster: admin_port_cluster
                          - match:
                              prefix: "/metrics"
                              headers:
                                - name: ":method"
                                  string_match:
                                    exact: GET
                            route:
                              prefix_rewrite: /stats/prometheus?usedonly
                              cluster: admin_port_cluster
                          - match:
                              prefix: "/stats"
                              headers:
                                - name: ":method"
                                  string_match:
                                    exact: GET
                            route:
                              prefix_rewrite: /stats
                              cluster: admin_port_cluster
                  http_filters:
                    - name: envoy.filters.http.router
                      typed_config:
                        "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      clusters:
        - name: xds_cluster
          alt_stat_name: xds_cluster
          connect_timeout: 5.000s
          load_assignment:
            cluster_name: xds_cluster
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: xds.cluster.local
                      port_value: 9977
          typed_extension_protocol_options:
            envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
              "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
              explicit_http_config:
                http2_protocol_options: {}
              http_filters:
              - name: transform
                typed_config:
                  "@type": type.googleapis.com/envoy.api.v2.filter.http.FilterTransformations
                  transformations:
                  - match:
                      prefix: "/"
                    route_transformations:
                      request_transformation:
                        transformation_template:
                          headers:
                            authorization: {"text": 'Bearer {{ "{{ trim(data_source(\"token\")) -}}" }}'}
                          passthrough: {}
                          data_sources:
                            token:
                              filename: "/var/run/secrets/tokens/xds-token"
                              watched_directory:
                                path: "/var/run/secrets/tokens"
              - name: envoy.filters.http.upstream_codec
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.upstream_codec.v3.UpstreamCodec
          upstream_connection_options:
            tcp_keepalive:
              keepalive_time: 10
          type: STRICT_DNS
          respect_dns_ttl: true
        - name: admin_port_cluster
          connect_timeout: 5.000s
          type: STATIC
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: admin_port_cluster
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 19000
    dynamic_resources:
      ads_config:
        transport_api_version: V3
        api_type: GRPC
        rate_limit_settings: {}
        grpc_services:
        - envoy_grpc:
            cluster_name: xds_cluster
      cds_config:
        resource_api_version: V3
        ads: {}
      lds_config:
        resource_api_version: V3
        ads: {}
---
# Source: kgateway-proxy/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gw
  labels:
    kgateway: kube-gateway
    app.kubernetes.io/name: gw
    app.kubernetes.io/instance: gw
    gateway.networking.k8s.io/gateway-name: gw
    app.kubernetes.io/version: "1.0.0-ci1"
    gateway.networking.k8s.io/gateway-class-name: kgateway
    app.kubernetes.io/managed-by: kgateway
spec:
  type: LoadBalancer
  ports:
  - name: listener-8080
    protocol: TCP
    targetPort: 8080
    port: 8080
  selector:
    app.kubernetes.io/name: gw
    app.kubernetes.io/instance: gw
    gateway.networking.k8s.io/gateway-name: gw
---
# Source: kgateway-proxy/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gw
  labels:
    kgateway: kube-gateway
    app.kubernetes.io/name: gw
    app.kubernetes.io/instance: gw
    gateway.networking.k8s.io/gateway-name: gw
    app.kubernetes.io/version: "1.0.0-ci1"
    gateway.networking.k8s.io/gateway-class-name: kgateway
    app.kubernetes.io/managed-by: kgateway
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: gw
      app.kubernetes.io/instance: gw
      gateway.networking.k8s.io/gateway-name: gw
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
      labels:
        kgateway: kube-gateway
        app.kubernetes.io/name: gw
        app.kubernetes.io/instance: gw
        gateway.networking.k8s.io/gateway-name: gw
        gateway.networking.k8s.io/gateway-class-name: kgateway
    spec:
      serviceAccountName: gw
      containers:
      - name: kgateway-proxy
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10101
        args:
        - "--disable-hot-restart"
        - "--service-node"
        - $(POD_NAME).$(POD_NAMESPACE)
        - "--log-level"
        - "info"
        image: "ghcr.io/envoy-wrapper:v2.1.0-dev"
        volumeMounts:
        - mountPath: /etc/envoy
          name: envoy-config
        - name: xds-token
          mountPath: /var/run/secrets/tokens
          readOnly: true
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: ENVOY_UID
          value: "0"
        ports:
        - name: listener-8080
          protocol: TCP
          containerPort: 8080
        - name: http-monitoring
          containerPort: 9091
        startupProbe:
          failureThreshold: 60
          httpGet:
            path: /ready
            port: 8082
          periodSeconds: 1
          successThreshold: 1
          timeoutSeconds: 2
        readinessProbe:
          httpGet:
            path: /ready
            port: 8082
          periodSeconds: 10
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - wget --post-data "" -O /dev/null 127.0.0.1:19000/healthcheck/fail; sleep 10
      terminationGracePeriodSeconds: 60
      volumes:
      - name: xds-token
        projected:
          sources:
          - serviceAccountToken:
              audience: kgateway
              expirationSeconds: 43200
              path: xds-token
      - configMap:
          name: gw
        name: envoy-config
